var search_data = {"index":{"searchIndex":["actioncontroller","testcase","actiondispatch","integrationtest","actionmailer","testcase","actionview","testcase","activesupport","testcase","minitest","rails","expectations","railtie","testing","constantlookup","rails","generators","testcase","all_tasks()","assert_difference()","assert_difference()","assert_difference()","assert_dom_equal()","assert_dom_not_equal()","assert_generates()","assert_no_difference()","assert_no_difference()","assert_no_difference()","assert_no_tag()","assert_recognizes()","assert_redirected_to()","assert_response()","assert_routing()","assert_select()","assert_select_email()","assert_select_encoded()","assert_tag()","assert_template()","determine_default_controller_class()","determine_default_generator()","determine_default_helper_class()","determine_default_mailer()","must_change()","must_dom_equal()","must_have_tag()","must_redirect_to()","must_render_template()","must_respond_with()","must_route_for()","must_route_from()","must_select()","must_select_email()","must_select_encoded()","refute_difference()","refute_difference()","refute_difference()","refute_dom_equal()","refute_tag()","wont_change()","wont_dom_equal()","wont_have_tag()","readme"],"longSearchIndex":["actioncontroller","actioncontroller::testcase","actiondispatch","actiondispatch::integrationtest","actionmailer","actionmailer::testcase","actionview","actionview::testcase","activesupport","activesupport::testcase","minitest","minitest::rails","minitest::rails::expectations","minitest::rails::railtie","minitest::rails::testing","minitest::rails::testing::constantlookup","rails","rails::generators","rails::generators::testcase","minitest::rails::testing::all_tasks()","actiondispatch::integrationtest#assert_difference()","actionview::testcase#assert_difference()","activesupport::testcase#assert_difference()","actioncontroller::testcase#assert_dom_equal()","actioncontroller::testcase#assert_dom_not_equal()","actioncontroller::testcase#assert_generates()","actiondispatch::integrationtest#assert_no_difference()","actionview::testcase#assert_no_difference()","activesupport::testcase#assert_no_difference()","actioncontroller::testcase#assert_no_tag()","actioncontroller::testcase#assert_recognizes()","actioncontroller::testcase#assert_redirected_to()","actioncontroller::testcase#assert_response()","actioncontroller::testcase#assert_routing()","actioncontroller::testcase#assert_select()","actioncontroller::testcase#assert_select_email()","actioncontroller::testcase#assert_select_encoded()","actioncontroller::testcase#assert_tag()","actioncontroller::testcase#assert_template()","actioncontroller::testcase::determine_default_controller_class()","rails::generators::testcase::determine_default_generator()","actionview::testcase::determine_default_helper_class()","actionmailer::testcase::determine_default_mailer()","minitest::rails::expectations#must_change()","minitest::rails::expectations#must_dom_equal()","minitest::rails::expectations#must_have_tag()","minitest::rails::expectations#must_redirect_to()","minitest::rails::expectations#must_render_template()","minitest::rails::expectations#must_respond_with()","minitest::rails::expectations#must_route_for()","minitest::rails::expectations#must_route_from()","minitest::rails::expectations#must_select()","minitest::rails::expectations#must_select_email()","minitest::rails::expectations#must_select_encoded()","actiondispatch::integrationtest#refute_difference()","actionview::testcase#refute_difference()","activesupport::testcase#refute_difference()","actioncontroller::testcase#refute_dom_equal()","actioncontroller::testcase#refute_tag()","minitest::rails::expectations#wont_change()","minitest::rails::expectations#wont_dom_equal()","minitest::rails::expectations#wont_have_tag()",""],"info":[["ActionController","","ActionController.html","",""],["ActionController::TestCase","","ActionController/TestCase.html","",""],["ActionDispatch","","ActionDispatch.html","",""],["ActionDispatch::IntegrationTest","","ActionDispatch/IntegrationTest.html","",""],["ActionMailer","","ActionMailer.html","",""],["ActionMailer::TestCase","","ActionMailer/TestCase.html","",""],["ActionView","","ActionView.html","",""],["ActionView::TestCase","","ActionView/TestCase.html","",""],["ActiveSupport","","ActiveSupport.html","",""],["ActiveSupport::TestCase","","ActiveSupport/TestCase.html","",""],["Minitest","","Minitest.html","",""],["Minitest::Rails","","Minitest/Rails.html","",""],["Minitest::Rails::Expectations","","Minitest/Rails/Expectations.html","",""],["Minitest::Rails::Railtie","","Minitest/Rails/Railtie.html","",""],["Minitest::Rails::Testing","","Minitest/Rails/Testing.html","",""],["Minitest::Rails::Testing::ConstantLookup","","Minitest/Rails/Testing/ConstantLookup.html","","<p>Resolves a constant from a minitest spec name.\n<p>Given the following spec-style test:\n\n<pre>describe WidgetsController, ...</pre>\n"],["Rails","","Rails.html","",""],["Rails::Generators","","Rails/Generators.html","",""],["Rails::Generators::TestCase","","Rails/Generators/TestCase.html","",""],["all_tasks","Minitest::Rails::Testing","Minitest/Rails/Testing.html#method-c-all_tasks","()","<p>Retreive all the directories that have tests in them.\n"],["assert_difference","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_difference","","<p>Checks the numeric difference between the return value of an expression as a result of what is evaluated. …\n"],["assert_difference","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_difference","","<p>Checks the numeric difference between the return value of an expression as a result of what is evaluated. …\n"],["assert_difference","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-i-assert_difference","","<p>Checks the numeric difference between the return value of an expression as a result of what is evaluated. …\n"],["assert_dom_equal","ActionController::TestCase","ActionController/TestCase.html#method-i-assert_dom_equal","","<p>Checks that two HTML strings are equivalent. That they contain the same elements and attributes with …\n"],["assert_dom_not_equal","ActionController::TestCase","ActionController/TestCase.html#method-i-assert_dom_not_equal","","<p>Checks that two HTML strings are not equivalent. That they do not contain the same elements and attributes …\n"],["assert_generates","ActionController::TestCase","ActionController/TestCase.html#method-i-assert_generates","","<p>Asserts that the provided options can be used to generate the provided path. This is the inverse of  …\n"],["assert_no_difference","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_no_difference","","<p>Checks that the numeric result of evaluating an expression is not changed before and after invoking. …\n"],["assert_no_difference","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_no_difference","","<p>Checks that the numeric result of evaluating an expression is not changed before and after invoking. …\n"],["assert_no_difference","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-i-assert_no_difference","","<p>Checks that the numeric result of evaluating an expression is not changed before and after invoking. …\n"],["assert_no_tag","ActionController::TestCase","ActionController/TestCase.html#method-i-assert_no_tag","","<p>Identical to <code>assert_tag</code>, but asserts that a matching tag does <em>not</em> exist. (See <code>assert_tag</code> for a full discussion …\n"],["assert_recognizes","ActionController::TestCase","ActionController/TestCase.html#method-i-assert_recognizes","","<p>Asserts that the routing of the given <code>path</code> was handled correctly and that the parsed options (given in …\n"],["assert_redirected_to","ActionController::TestCase","ActionController/TestCase.html#method-i-assert_redirected_to","","<p>Assert that the redirection options passed in match those of the redirect called in the latest action. …\n"],["assert_response","ActionController::TestCase","ActionController/TestCase.html#method-i-assert_response","","<p>Asserts that the response is one of the following types:\n<p><code>:success</code>   - Status code was in the 200-299 range …\n"],["assert_routing","ActionController::TestCase","ActionController/TestCase.html#method-i-assert_routing","","<p>Asserts that path and options match both ways; in other words, it verifies that <code>path</code> generates <code>options</code> …\n"],["assert_select","ActionController::TestCase","ActionController/TestCase.html#method-i-assert_select","","<p>An assertion that selects elements and makes one or more equality tests.\n<p>If the first argument is an element, …\n"],["assert_select_email","ActionController::TestCase","ActionController/TestCase.html#method-i-assert_select_email","","<p>Extracts the body of an email and runs nested assertions on it.\n<p>You must enable deliveries for this assertion …\n"],["assert_select_encoded","ActionController::TestCase","ActionController/TestCase.html#method-i-assert_select_encoded","","<p>Extracts the content of an element, treats it as encoded HTML and runs nested assertion on it.\n<p>You typically …\n"],["assert_tag","ActionController::TestCase","ActionController/TestCase.html#method-i-assert_tag","","<p>Asserts that there is a tag/node/element in the body of the response that meets all of the given conditions. …\n"],["assert_template","ActionController::TestCase","ActionController/TestCase.html#method-i-assert_template","","<p>Asserts that the request was rendered with the appropriate template file or partials.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># assert that the ...</span>\n</pre>\n"],["determine_default_controller_class","ActionController::TestCase","ActionController/TestCase.html#method-c-determine_default_controller_class","(name)","<p>Resolve the controller from the test name when using the spec DSL\n"],["determine_default_generator","Rails::Generators::TestCase","Rails/Generators/TestCase.html#method-c-determine_default_generator","(name)",""],["determine_default_helper_class","ActionView::TestCase","ActionView/TestCase.html#method-c-determine_default_helper_class","(name)","<p>Resolve the helper or view from the test name when using the spec DSL\n"],["determine_default_mailer","ActionMailer::TestCase","ActionMailer/TestCase.html#method-c-determine_default_mailer","(name)","<p>Resolve the mailer from the test name when using the spec DSL\n"],["must_change","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_change","expression, difference = 1, message = nil","<p>Checks the numeric difference between the return value of an expression as a result of what is evaluated. …\n"],["must_dom_equal","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_dom_equal","expected, message = nil","<p>Checks that two HTML strings are equivalent. That they contain the same elements and attributes with …\n"],["must_have_tag","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_have_tag","","<p>Expects that there is a tag/node/element in the body of the response that meets all of the given conditions. …\n"],["must_redirect_to","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_redirect_to","","<p>Expects that the redirection options passed in match those of the redirect called in the latest action. …\n"],["must_render_template","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_render_template","","<p>Expects that the request was rendered with the appropriate template file or partials.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># expect that the ...</span>\n</pre>\n"],["must_respond_with","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_respond_with","","<p>Expects that the response is one of the following types:\n<p><code>:success</code>   - Status code was in the 200-299 range …\n"],["must_route_for","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_route_for","","<p>Expects that path and options match both ways; in other words, it verifies that <code>path</code> generates <code>options</code> …\n"],["must_route_from","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_route_from","","<p>Expects that the provided options can be used to generate the provided path. This is the inverse of  …\n"],["must_select","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_select","","<p>An expectation that selects elements and makes one or more equality tests.\n<p>If the first argument is an …\n"],["must_select_email","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_select_email","","<p>Extracts the body of an email and runs nested expectations on it.\n<p>You must enable deliveries for this …\n"],["must_select_encoded","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_select_encoded","","<p>Extracts the content of an element, treats it as encoded HTML and runs nested expectation on it.\n<p>You typically …\n"],["refute_difference","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-refute_difference","","<p>Checks that the numeric result of evaluating an expression is not changed before and after invoking. …\n"],["refute_difference","ActionView::TestCase","ActionView/TestCase.html#method-i-refute_difference","","<p>Checks that the numeric result of evaluating an expression is not changed before and after invoking. …\n"],["refute_difference","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-i-refute_difference","","<p>Checks that the numeric result of evaluating an expression is not changed before and after invoking. …\n"],["refute_dom_equal","ActionController::TestCase","ActionController/TestCase.html#method-i-refute_dom_equal","","<p>Checks that two HTML strings are not equivalent. That they do not contain the same elements and attributes …\n"],["refute_tag","ActionController::TestCase","ActionController/TestCase.html#method-i-refute_tag","","<p>Identical to <code>assert_tag</code>, but asserts that a matching tag does <em>not</em> exist. (See <code>assert_tag</code> for a full discussion …\n"],["wont_change","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-wont_change","expression, message = nil","<p>Checks that the numeric result of evaluating an expression is not changed before and after invoking. …\n"],["wont_dom_equal","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-wont_dom_equal","expected, message = nil","<p>Checks that the numeric result of evaluating an expression is not changed before and after invoking. …\n"],["wont_have_tag","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-wont_have_tag","","<p>Identical to <code>must_have_tag</code>, but asserts that a matching tag does <em>not</em> exist. (See <code>must_have_tag</code> for a …\n"],["README","","README_rdoc.html","","<p>minitest-rails\n<p>Minitest integration for Rails 4.1+\n<p><img src=“https://secure.travis-ci.org/blowmage/minitest-rails.png” …\n"]]}}